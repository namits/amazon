c
expect(assigns(:productss))
@products
@request.instance_variables
@request
response.instance_variables
response.keys
response.body
response
c
e.message
e
e.full_messages
e
c
e.message
e.messages
e.message
e
continue
c
current_response_count
n
old_response_count
c
current_response_count
n
old_response_count
c
a.count
a
a = Product.save_fetch_records
c
expect { Product.save_fetch_records.count }.should > 0
Product.count
previous_record
n
c
expect { Product.fetch_products.count }.should > 0
Product.fetch_products.count
Product.fetch_products
Product
c
response
c
response.status
c
request.headers["X-Parse-REST-API-Key"] = API_TOKEN
request.headers["X-Parse-REST-API-Key"]
equest.headers["X-Parse-REST-API-Key"]
request
params
c
n
c
check_api_token
n
c
API_TOKEN
get 'region', params: {region: 'India'}
get 'region'
get 'region', params: {region: 'India'}
get '/api/v1/service/AmazonCloudFront/region', params: {region: 'India'}
get 'region', region: 'India'
c
get '/api/v1/service/AmazonCloudFront/region', params: {region: 'India'}
get '/api/v1/service/AmazonCloudFront/region', region: 'India'
c
params
get '/api/v1/service/AmazonCloudFront/region'
c
n
c
get '/api/v1/service/AmazonCloudFront/region', access_token: API_TOKEN
c
n
c
to_param
params
param
c
response.body
response
expect(response)
c
response
c
"QWERTYUIOP" == api_token
api_token.blank?
api_token
pi_token.blank?
api_token
c
api_token.blank?
api_token
c
api_token
api_token.nil?
api_token.blank?
api_token
c
n
c
params[:region]
params
Product.save_fetch_records
Product.destroy_all
Product.last
c
